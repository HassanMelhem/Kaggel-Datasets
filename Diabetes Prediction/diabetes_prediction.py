# -*- coding: utf-8 -*-
"""Diabetes_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o47sUxwyaxKw2Pw1USzwPMJKArFTZCuE

## Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score, confusion_matrix

"""## Data Collection and Analysis
PIMA DATASET


"""

#download the dataset from https://www.dropbox.com/s/uh7o7uyeghqkhoy/diabetes.csv?dl=0
dataset = pd.read_csv("diabetes.csv")

dataset.head()

dataset.shape

dataset.describe()

dataset["Outcome"].value_counts()

dataset.groupby('Outcome').mean()

X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

print(X)

print(y)

"""##Splitting the Data Into Test and Train"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=0)

"""## data Standarization"""

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

print(X_train)

print(X_test)

"""## Training The Model"""

classifier = svm.SVC()
classifier.fit(X_train, y_train)

"""Model Evaluation"""

X_train_prediction = classifier.predict(X_train)
print(f"Accuracy score on the train dataset is {accuracy_score(X_train_prediction, y_train)}")

y_pred = classifier.predict(X_test)
print(f"Accuracy score on the test dataset is {accuracy_score(y_pred, y_test)}")
cm = confusion_matrix(y_pred, y_test)
print(cm)

input_data = (5,166,72,19,175,25.8,0.587,51)

# changing the input_data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardize the input data
std_data = sc.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

from sklearn.model_selection import GridSearchCV

param_grid = {
    'C': [0.1, 1, 10],
    'kernel': ['linear', 'rbf'],
    'gamma': ['scale', 'auto', 0.1, 1, 10],
    'probability': [True, False],
}

svc = svm.SVC()

grid_search = GridSearchCV(svc, param_grid,  refit = True, verbose = 3)
grid_search.fit(X_train, y_train)

# print best parameter after tuning
print(grid_search.best_params_)

# print how our model looks after hyper-parameter tuning
print(grid_search.best_estimator_)

y_pred = grid_search.predict(X_test)
print(accuracy_score(y_pred, y_test)*100)
cm = confusion_matrix(y_pred, y_test)
print(cm)

